module Tx where

import Address(Addr, Addr_rwd, Ix, Slot, Network);
import Crypto(VKey, Sig, ScriptHash, Script, KeyHash_G, DataHash, KeyHash);
import PParams(Coin, Epoch, PParamsUpdate);
import Delegation(DCert);
import Script(Script^ph1);
import Value(Value);
import CostModel(ExUnits);

{-----------------------------------------------------------------------------
    Transactions
    Shelley spec, Figure 10
    Mary spec, Figure 5
    Alonzo spec, Figures 2 and 3
------------------------------------------------------------------------------}
-- Abstract types

ScriptIntegrityHash         = _; --^ Script data hash
Script_plc                  = _; --^ Plutus core scripts
Data                        = _; --^ Generic script data
TxId                        = _ ; --^ transaction identifier
Metadatum                   = _ ; --^ metadatum
AuxiliaryDataHash           = _ ; --^ auxiliary data hash

-- Script types

Script^ph2                  = Script_plc;
Script                      = Script^ph1 + Script^ph2;
IsValid                     = Bool;
Datum                       = Data;
Redeemer                    = Data;

-- Derived types

ValidityInterval            = Slot? × Slot?;
Tag                         =
    Σ{Spend                 : Unit
    , Mint                  : Unit
    , Cert                  : Unit
    , Rewrd                 : Unit
    };
RdmrPtr                     = Tag × Ix;
TxIn                        = TxId × Ix; --^ transaction input
TxOut                       = Addr × Value × DataHash?; --^ transaction output
UTxO                        = TxIn ↦ TxOut; --^ unspent tx outputs
Wdrl                        = Addr_rwd ↦ Coin; --^ reward withdrawal
Metadata                    = ℕ ↦ Metadatum; --^ metadata

-- Derived types (update system)

ProposedPPUpdates           = KeyHash_G ↦ PParamsUpdate; --^ proposed updates
Update                      = ProposedPPUpdates × Epoch; --^ update proposal

-- Transaction Types

TxBody                      =
    { txins                 : ℙ TxIn  --^ transaction inputs
    , collateral            : ℙ TxIn  --^ collateral inputs
    , txouts                : Ix ↦ TxOut  --^  transaction outputs
    , txcerts               : DCert*  --^ delegation certificates
    , mint                  : Value  --^ value minted in this transaction
    , txfee                 : Coin  --^ transaction fee
    , txvldt                : ValidityInterval  --^ validity interval
    , txwdrls               : Wdrl  --^ reward withdrawals
    , txUpdates             : Update?  --^ protocol parameter update
    , reqSignerHashes       : ℙ KeyHash  --^ hashes of VKeys passed to scripts
    , scriptIntegrityHash   : ScriptIntegrityHash?
                            --^ hash of script-related data
    , txADhash              : AuxiliaryDataHash?  --^ auxiliary data hash
    , txnetworkid           : Network?  --^ tx network ID
    };

TxWitness                   =
    { txwitsVKey            : VKey ↦ Sig  --^ VKey signatures
    , txscripts             : ScriptHash ↦ Script  --^ all scripts
    , txdats                : DataHash ↦ Datum --^ all datum objets
    , txrdmrs               : RdmrPtr ↦ Redeemer × ExUnits
                            --^ all redeemers/budget
    };

Tx                          =
    { txbody                : TxBody  --^ transaction body
    , txWitness             : TxWitness --^  transaction witnesses
    , IsValid               : IsValid --^  validation tag
    , txAD                  : AuxiliaryData? --^ auxiliary data
    };

AuxiliaryData               =
    { scripts               : ℙ Script  --^ set scripts
    , metadata              : Metadata?  --^ metadata
    };
