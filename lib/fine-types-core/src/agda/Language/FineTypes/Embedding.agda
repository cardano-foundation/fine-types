module Language.FineTypes.Embedding where

{-# FOREIGN AGDA2HS
-- !!! This Haskell module has been autogenerated by agda2hs.
-- !!! Do NOT change; change the original .agda file instead.
#-}

open import Haskell.Prelude hiding (_×_; _+_; Pair)
open import Relation.Nullary using (¬_)

open import Data.Embedding
open import Language.FineTypes.Value.Def
open import Language.FineTypes.Typ
  using (Typ; _+_; _×_)

import Language.FineTypes.Typ as Typ

{-----------------------------------------------------------------------------
    Embedding with Typ information
------------------------------------------------------------------------------}
record EmbeddingTyp (@0 A B : Typ) : Set where
  field
    embed    : Embedding (Value A) (Value B)
    typcheck : Typ → Maybe Typ
    @0 accepts : typcheck A ≡ Just B
    @0 rejects : ∀ (C : Typ) → typcheck C ≡ Nothing → ¬(C ≡ A)

open EmbeddingTyp public

{-# COMPILE AGDA2HS EmbeddingTyp #-}

{-----------------------------------------------------------------------------
    Specific Embeddings
------------------------------------------------------------------------------}
distributeVal
  : ∀ {@0 A B C : Typ}
  → Embedding
      (Value ((A + B) × C))
      (Value ((A × C) + (B × C)))
distributeVal =
  record
    { to = λ
      { (Product2 (Sum2L a) c) → Sum2L (Product2 a c)
      ; (Product2 (Sum2R b) c) → Sum2R (Product2 b c)
      }
    ; from = λ
      { (Sum2L (Product2 a c)) → (Product2 (Sum2L a) c)
      ; (Sum2R (Product2 b c)) → (Product2 (Sum2R b) c)
      }
    ; from∘to = λ
      { (Product2 (Sum2L a) c) → refl
      ; (Product2 (Sum2R b) c) → refl
      }
    }

{-# COMPILE AGDA2HS distributeVal #-}

distribute
  : ∀ {@0 A B C : Typ}
  → EmbeddingTyp
      ((A + B) × C)
      ((A × C) + (B × C))
distribute =
  record
    { embed = distributeVal
    ; typcheck = λ
      { (Typ.Two Typ.Product2 (Typ.Two Typ.Sum2 a b) c)
          → Just (Typ.Two Typ.Sum2 (Typ.Two Typ.Product2 a c) (Typ.Two Typ.Product2 b c))
      ; _ → Nothing
      }
    ; accepts = refl
    ; rejects = λ
      { (Typ.Two Typ.Product2 (Typ.Two Typ.Sum2 _ _) _) → λ ()
      }
    }

{-# COMPILE AGDA2HS distribute #-}
