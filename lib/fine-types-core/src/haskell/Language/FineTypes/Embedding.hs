{-# LANGUAGE LambdaCase #-}
module Language.FineTypes.Embedding where

import Data.Embedding (Embedding)
import Language.FineTypes.Typ (Typ(Two))
import qualified Language.FineTypes.Typ (OpTwo(Product2, Sum2))
import Language.FineTypes.Value.Def (Value(Product2, Sum2L, Sum2R))

-- !!! This Haskell module has been autogenerated by agda2hs.
-- !!! Do NOT change; change the original .agda file instead.

data EmbeddingTyp = EmbeddingTyp{embed :: Embedding Value Value,
                                 typcheck :: Typ -> Maybe Typ}

distributeVal :: Embedding Value Value
distributeVal
  = Embedding
      (\case
           Product2 (Sum2L a) c -> Sum2L (Product2 a c)
           Product2 (Sum2R b) c -> Sum2R (Product2 b c))
      (\case
           Sum2L (Product2 a c) -> Product2 (Sum2L a) c
           Sum2R (Product2 b c) -> Product2 (Sum2R b) c)

distribute :: EmbeddingTyp
distribute
  = EmbeddingTyp distributeVal
      (\case
           Two Language.FineTypes.Typ.Product2
             (Two Language.FineTypes.Typ.Sum2 a b) c -> Just
                                                          (Two Language.FineTypes.Typ.Sum2
                                                             (Two Language.FineTypes.Typ.Product2 a
                                                                c)
                                                             (Two Language.FineTypes.Typ.Product2 b
                                                                c))
           _ -> Nothing)

